CHANDLER_GFF = "../Juglans_genome_assemblies/Jregia/Chandler/GCF_001411555.2_Walnut_2.0_genomic.gff"
CHANDLER_CDS = "QRY_vs_hJregCha_alignments/JregiaV2_cds.fa"

JM3101_GFF = "../Juglans_genome_assemblies/Jmicrocarpa/GCF_004785595.1_Jm3101_v1.0_genomic.gff"
JM3101_CDS = "QRY_vs_HJmic_alignments/Jm3101_cds.fa"

JMANBNU_GFF = "/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jmandshurica/BNU/JMA.chrGene.gff3"
JMANBNU_CDS = "QRY_vs_hJman_alignments/hJmanBNU_cds.fa"

JCALIALT_GFF = "/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jcalifornica/Jcali_alt.gff"
JCALIALT_CDS = "QRY_vs_hJcaliAlt_alignments/hJcaliAlt_cds.fa"

CILLPAW_GFF = '/home/jgroh/heterodichogamy/Carya_genome_assemblies/Pawnee_anno_liftoff_from_Jregia.gff',
CILLPAW_CDS = "QRY_vs_CillPaw_alignments/Pawnee_cds.fa"

JUGDIR="/home/jgroh/heterodichogamy/Juglans_genome_assemblies/"
CARYADIR="/home/jgroh/heterodichogamy/Carya_genome_assemblies/"
PTERODIR="/home/jgroh/heterodichogamy/Pterocarya_genome_assemblies/"
PLATYDIR="/home/jgroh/heterodichogamy/Platycarya_genome_assemblies/"
CYCLODIR="/home/jgroh/heterodichogamy/Cyclocarya_genome_assemblies/"
ENGELDIR="/home/jgroh/heterodichogamy/Engelhardia_genome_assemblies/"


GNOMS = {
    'hJregCha': JUGDIR+'Jregia/Chandler/JregiaV2.fa',
    'hJregSerr':  JUGDIR+'Jregia/Serr/GCA_004785585.1_JrSerr_v1.0_genomic.fna',
    'hJregZho': JUGDIR+'Jregia/Zhongmucha-1/Jregia.genome_v1.0.fa',
    'HJregBNU': JUGDIR+'Jregia/BNU/JRE_v3.3.fasta',
    'HJmic':  JUGDIR+'Jmicrocarpa/Jm3101_v1.0.fna',
    'hJcaliAlt':  JUGDIR+'Jcalifornica/Jcali_alt.fna',
    'HJcaliPrimary':  JUGDIR+'Jcalifornica/Jcali_primary.fna',
    'hJmanBNU': JUGDIR+'Jmandshurica/BNU/JMA_v3.3.fasta',
    'HJmanNFU': JUGDIR+'Jmandshurica/NFU/GWHBEUN00000000.genome.fasta',
    'hJnigBNU': JUGDIR+'Jnigra/BNU/JNI.pseudoChr.fasta',
    'hJsig':  JUGDIR+'Jsigillata/Jsi.chr.genome.fasta',
    'CillPaw':  CARYADIR+'Pawnee_v1.fna',
    'CillLakV1': CARYADIR+'Lakota_v1.fna',
    'CillLakAlt': CARYADIR+'Lakota_alt.fna', 
    'CillEllV1':  CARYADIR+'Elliott_v1.fna', 
    'CillEllAlt': CARYADIR+'Elliott_alt.fna',
    'CillOax': CARYADIR+'Oaxaca_v1.fna',
    'PsteBNU': PTERODIR+'Beijing_assembly/PST_2.0.assembly.fasta',
    'PsteUCD':  PTERODIR+'GCA_003123785.1_ASM312378v1_genomic.fna',
    'Pstr': PLATYDIR+'strobilaceae/Pstr_hic_v3.fa',
    'Plon': PLATYDIR+'longipes/Plon_hic_v3.fa',
    'CycloPA':  CYCLODIR+'2PA2023.fna',
    'CycloPG':  CYCLODIR+'2PG2023.fna',
#    'Erox': ENGELDIR+'Arox.fa'
    }


ANCHORWAVE_ENV = "/home/jgroh/heterodichogamy/conda_envs/anchorwave.yaml"

vs_HJmicGnoms = GNOMS.copy()
del vs_HJmicGnoms['HJmic']

vs_hJregGnoms = GNOMS.copy()
del vs_hJregGnoms['hJregCha']

keys_to_remove =  ['CillLakV1', 'CillLakAlt', 'CillEllV1', 'CillEllAlt', 'CillOax']
for key in keys_to_remove:
    del vs_HJmicGnoms[key]
    del vs_hJregGnoms[key]

vs_hJcaliAltGnoms = {'HJcaliPrimary': GNOMS['HJcaliPrimary']}
vs_hJmanBNUGnoms = {'HJmanNFU': GNOMS['HJmanNFU']}

vs_CillPawGnoms = {
    'CillLakV1': GNOMS['CillLakV1'],
    'CillLakAlt': GNOMS['CillLakAlt'],
    'CillEllV1': GNOMS['CillEllV1'],
    'CillEllAlt': GNOMS['CillEllAlt'],
    'CillOax':  GNOMS['CillOax'],
    'hJregCha': GNOMS['hJregCha'],
    'HJregBNU': GNOMS['HJregBNU'],
    }


rule all:
  input:
    expand("QRY_vs_hJcaliAlt_alignments/{gnom}/alignment.maf", gnom=vs_hJcaliAltGnoms.keys()),
    expand("QRY_vs_CillPaw_alignments/{gnom}/alignment.maf", gnom=vs_CillPawGnoms.keys()),
    expand("QRY_vs_hJmanBNU_alignments/{gnom}/alignment.maf", gnom=vs_hJmanBNUGnoms.keys()),
    expand("QRY_vs_HJmic_alignments/{gnom}/alignment.maf", gnom=vs_HJmicGnoms.keys()),
    expand("QRY_vs_hJregCha_alignments/{gnom}/alignment.maf", gnom=vs_hJregGnoms.keys()),
    expand("QRY_vs_hJregCha_alignments/{gnom}/alignment.maf", gnom=vs_hJregGnoms.keys()),
    expand("QRY_vs_HJmic_alignments/{qryGnom}/Dxy_NC_054600.1.txt", qryGnom=vs_HJmicGnoms.keys()),
    expand("QRY_vs_hJregCha_alignments/{qryGnom}/Dxy_NC_049911.1.txt", qryGnom=vs_hJregGnoms.keys()),
    expand("QRY_vs_hJcaliAlt_alignments/{qryGnom}/Dxy_JAKSXL010000006.1.txt", qryGnom=vs_hJcaliAltGnoms.keys()), 
    expand("QRY_vs_hJmanBNU_alignments/{qryGnom}/Dxy_chr7.txt", qryGnom=vs_hJmanBNUGnoms.keys()),

# ============= Liftoff Chandler annotation to Jcali_primary ==============
rule liftoff:
  input:
    gff='/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jregia/Chandler/GCF_001411555.2_Walnut_2.0_genomic.gff',
    ref='/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jregia/Chandler/GCF_001411555.2_Walnut_2.0_genomic.fna', # should contain all unplaced scaffolds, any sequence present in gff
    target='/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jcalifornica/Jcali_alt.fna',
  output:
    '/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jcalifornica/Jcali_alt.gff'
  conda:
    '/home/jgroh/heterodichogamy/conda_envs/liftoff.yaml'
  shell:
    """
    liftoff -g {input.gff} \
        -dir "/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jcalifornia/" \
        -o {output} \
        -u "/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jcalifornica/Jreg_to_JcaliAlt_unmapped.txt" \
        {input.target} {input.ref}
    """

# ============= Liftoff Chandler annotation to Pawnee ==============
rule liftoff_2_pawnee:
  input:
    gff='/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jregia/Chandler/GCF_001411555.2_Walnut_2.0_genomic.gff',
    ref='/home/jgroh/heterodichogamy/Juglans_genome_assemblies/Jregia/Chandler/GCF_001411555.2_Walnut_2.0_genomic.fna', # should contain all unplaced scaffolds, any sequence present in gff
    target='/home/jgroh/heterodichogamy/Carya_genome_assemblies/Pawnee_v1.fna'
  output:
    '/home/jgroh/heterodichogamy/Carya_genome_assemblies/Pawnee_anno_liftoff_from_Jregia.gff'
  conda:
    '/home/jgroh/heterodichogamy/conda_envs/liftoff.yaml'
  shell:
    """
    liftoff -g {input.gff} \
        -dir "/home/jgroh/heterodichogamy/Carya_genome_assemblies/" \
        -o {output} \
        -u "/home/jgroh/heterodichogamy/Carya_genome_assemblies/Jreg_to_Pawnee_unmapped.txt" \
        {input.target} {input.ref}
    """


# ======== ANCHORWAVE Setup =====

# ----- convert gff to fasta -----

rule gff_to_fasta_Chandler:
  input:
    fa=GNOMS['hJregCha'],
    gff=CHANDLER_GFF
  output:
    CHANDLER_CDS
  conda:
    ANCHORWAVE_ENV
  shell:
    "anchorwave gff2seq -r {input.fa} -i {input.gff} -o {output}"

rule gff_to_fasta_Jm3101:
  input:
    fa=GNOMS['HJmic'],
    gff=JM3101_GFF
  output: 
    JM3101_CDS
  conda:
    ANCHORWAVE_ENV
  shell:
    "anchorwave gff2seq -r {input.fa} -i {input.gff} -o {output}"

rule gff_to_fasta_hJmanBNU:
  input:
    fa=GNOMS['hJmanBNU'],
    gff=JMANBNU_GFF
  output: 
    JMANBNU_CDS
  conda:
    ANCHORWAVE_ENV
  shell:
    "anchorwave gff2seq -r {input.fa} -i {input.gff} -o {output}"

rule gff_to_fasta_hJCali:
  input:
    fa=GNOMS['hJcaliAlt'],
    gff=JCALIALT_GFF
  output: 
    JCALIALT_CDS
  conda:
    ANCHORWAVE_ENV
  shell:
    "anchorwave gff2seq -r {input.fa} -i {input.gff} -o {output}"

rule gff_to_fasta_CillPaw:
  input:
    fa=GNOMS['CillPaw'],
    gff=CILLPAW_GFF
  output: 
    CILLPAW_CDS
  conda:
    ANCHORWAVE_ENV
  shell:
    "anchorwave gff2seq -r {input.fa} -i {input.gff} -o {output}"


# ---- Map CDS to reference -----

rule map_cds_ref_Chandler:
  input:
    fa=GNOMS['hJregCha'],
    cds=CHANDLER_CDS
  output:
    "QRY_vs_hJregCha_alignments/Chandler.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

    
rule map_cds_ref_Jm3101:
  input:
    fa=GNOMS['HJmic'],
    cds=JM3101_CDS
  output:
    "QRY_vs_HJmic_alignments/Jm3101.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule map_cds_ref_hJmanBNU:
  input:
    fa=GNOMS['hJmanBNU'],
    cds=JMANBNU_CDS
  output:
    "QRY_vs_hJmanBNU_alignments/hJmanBNU.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule map_cds_ref_hJcaliAlt:
  input:
    fa=GNOMS['hJcaliAlt'],
    cds=JCALIALT_CDS
  output:
    "QRY_vs_hJcaliAlt_alignments/hJcaliAlt.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule map_cds_ref_CillPaw:
  input:
    fa=GNOMS['CillPaw'],
    cds=CILLPAW_CDS
  output:
    "QRY_vs_CillPaw_alignments/CillPaw.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

# ---- map anchors to qry -----

rule QRY_vs_hJregCha_anchors:
  input:
    fa=lambda wildcards: GNOMS[wildcards.gnom],
    cds=CHANDLER_CDS
  output:
    "QRY_vs_hJregCha_alignments/{gnom}/qry.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule QRY_vs_HJmic_anchors:
  input:
    fa=lambda wildcards: GNOMS[wildcards.gnom],
    cds=JM3101_CDS
  output:
    "QRY_vs_HJmic_alignments/{gnom}/qry.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule QRY_vs_hJmanBNU_anchors:
  input:
    fa=lambda wildcards: GNOMS[wildcards.gnom],
    cds=JMANBNU_CDS
  output:
    "QRY_vs_hJmanBNU_alignments/{gnom}/qry.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule QRY_vs_hJcaliAlt_anchors:
  input:
    fa=lambda wildcards: GNOMS[wildcards.gnom],
    cds=JCALIALT_CDS
  output:
    "QRY_vs_hJcaliAlt_alignments/{gnom}/qry.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

rule QRY_vs_CillPaw_anchors:
  input:
    fa=lambda wildcards: GNOMS[wildcards.gnom],
    cds=CILLPAW_CDS
  output:
    "QRY_vs_CillPaw_alignments/{gnom}/qry.sam"
  conda:
    ANCHORWAVE_ENV
  resources:
    mem_mb=50000
  threads:
    12
  shell:
    "minimap2 -x splice -t 11 -k 12 -a -p 0.8 -N 20 {input.fa} {input.cds} > {output}"

# ====== Whole Genome Alignments, 1 rule per reference =====

rule QRY_vs_hJregCha_align:
  input:
    gff=CHANDLER_GFF,
    cds=CHANDLER_CDS,
    fa_ref=GNOMS['hJregCha'],
    fa_qry=lambda wildcards: GNOMS[wildcards.gnom],
    sam_ref="QRY_vs_hJregCha_alignments/Chandler.sam",
    sam_qry="QRY_vs_hJregCha_alignments/{gnom}/qry.sam"
  output:
    maf="QRY_vs_hJregCha_alignments/{gnom}/alignment.maf",
    fmaf="QRY_vs_hJregCha_alignments/{gnom}/alignment.f.maf",
  conda:
    ANCHORWAVE_ENV
  resources:
    runtime = 24*60,
    mem_mb=400000
  threads:
    20
  shell:
    """
    anchorwave proali -i {input.gff} -r {input.fa_ref} \
        -a {input.sam_qry} -as {input.cds} -ar {input.sam_ref} \
        -s {input.fa_qry} -o {output.maf} \
        -f {output.fmaf} \
        -t {threads} -R 1 -Q 1 
    """

rule QRY_vs_HJmic_align:
  input:
    gff=JM3101_GFF,
    cds=JM3101_CDS,
    fa_ref=GNOMS['HJmic'],
    fa_qry=lambda wildcards: GNOMS[wildcards.gnom],
    sam_ref="QRY_vs_HJmic_alignments/Jm3101.sam",
    sam_qry="QRY_vs_HJmic_alignments/{gnom}/qry.sam"
  output:
    maf="QRY_vs_HJmic_alignments/{gnom}/alignment.maf",
    fmaf="QRY_vs_HJmic_alignments/{gnom}/alignment.f.maf"
  conda:
    ANCHORWAVE_ENV
  resources:
    runtime = 24*60,
    mem_mb=400000
  threads:
    20
  shell:
    """
    anchorwave proali -i {input.gff} -r {input.fa_ref} \
        -a {input.sam_qry} -as {input.cds} -ar {input.sam_ref} \
        -s {input.fa_qry} -o {output.maf} \
        -f {output.fmaf} \
        -t {threads} -R 1 -Q 1 
    """

rule QRY_vs_hJmanBNU_align:
  input:
    gff=JMANBNU_GFF,
    cds=JMANBNU_CDS,
    fa_ref=GNOMS['hJmanBNU'],
    fa_qry=lambda wildcards: GNOMS[wildcards.gnom],
    sam_ref="QRY_vs_hJmanBNU_alignments/hJmanBNU.sam",
    sam_qry="QRY_vs_hJmanBNU_alignments/{gnom}/qry.sam"
  output:
    maf="QRY_vs_hJmanBNU_alignments/{gnom}/alignment.maf",
    fmaf="QRY_vs_hJmanBNU_alignments/{gnom}/alignment.f.maf"
  conda:
    ANCHORWAVE_ENV
  resources:
    runtime = 24*60,
    mem_mb=400000
  threads:
    20
  shell:
    """
    anchorwave proali -i {input.gff} -r {input.fa_ref} \
        -a {input.sam_qry} -as {input.cds} -ar {input.sam_ref} \
        -s {input.fa_qry} -o {output.maf} \
        -f {output.fmaf} \
        -t {threads} -R 1 -Q 1 
    """

rule QRY_vs_hJcaliAlt_align:
  input:
    gff=JCALIALT_GFF,
    cds=JCALIALT_CDS,
    fa_ref=GNOMS['hJcaliAlt'],
    fa_qry=lambda wildcards: GNOMS[wildcards.gnom],
    sam_ref="QRY_vs_hJcaliAlt_alignments/hJcaliAlt.sam",
    sam_qry="QRY_vs_hJcaliAlt_alignments/{gnom}/qry.sam"
  output:
    maf="QRY_vs_hJcaliAlt_alignments/{gnom}/alignment.maf",
    fmaf="QRY_vs_hJcaliAlt_alignments/{gnom}/alignment.f.maf"
  conda:
    ANCHORWAVE_ENV
  resources:
    runtime = 24*60,
    mem_mb=400000
  threads:
    20
  shell:
    """
    anchorwave proali -i {input.gff} -r {input.fa_ref} \
        -a {input.sam_qry} -as {input.cds} -ar {input.sam_ref} \
        -s {input.fa_qry} -o {output.maf} \
        -f {output.fmaf} \
        -t {threads} -R 1 -Q 1 
    """

rule QRY_vs_CillPaw_align:
  input:
    gff=CILLPAW_GFF,
    cds=CILLPAW_CDS,
    fa_ref=GNOMS['CillPaw'],
    fa_qry=lambda wildcards: GNOMS[wildcards.gnom],
    sam_ref="QRY_vs_CillPaw_alignments/CillPaw.sam",
    sam_qry="QRY_vs_CillPaw_alignments/{gnom}/qry.sam"
  output:
    maf="QRY_vs_CillPaw_alignments/{gnom}/alignment.maf",
    fmaf="QRY_vs_CillPaw_alignments/{gnom}/alignment.f.maf"
  conda:
    ANCHORWAVE_ENV
  resources:
    runtime = 24*60,
    mem_mb=400000
  threads:
    20
  shell:
    """
    anchorwave proali -i {input.gff} -r {input.fa_ref} \
        -a {input.sam_qry} -as {input.cds} -ar {input.sam_ref} \
        -s {input.fa_qry} -o {output.maf} \
        -f {output.fmaf} \
        -t {threads} -R 1 -Q 1 
    """

# ======= Dxy =======

rule Dxy_Chandler:
  input:
    maf="QRY_vs_hJregCha_alignments/{qryGnom}/alignment.maf",
  params:
    refGnom="hJregCha",
    qryGnom="{qryGnom}",
    chrom="NC_049911.1",
    windowSize=500
  output:
    "QRY_vs_hJregCha_alignments/{qryGnom}/Dxy_{chrom}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/R4.yaml"
  resources:
    mem_mb=30000
  threads:
    16
  shell:
    "Rscript --vanilla Dxy.R {input.maf} {params.refGnom} {params.qryGnom} {params.chrom} {params.windowSize} > {output}"


rule Dxy_hJcaliAlt:
  input:
    maf="QRY_vs_hJcaliAlt_alignments/{qryGnom}/alignment.maf",
  params:
    refGnom="hJcaliAlt",
    qryGnom="{qryGnom}",
    chrom="JAKSXL010000006.1",
    windowSize=500
  output:
    "QRY_vs_hJcaliAlt_alignments/{qryGnom}/Dxy_{chrom}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/R4.yaml"
  resources:
    mem_mb=30000
  threads:
    16
  shell:
    "Rscript --vanilla Dxy.R {input.maf} {params.refGnom} {params.qryGnom} {params.chrom} {params.windowSize} > {output}"


rule Dxy_hJmanBNU:
  input:
    maf="QRY_vs_hJmanBNU_alignments/{qryGnom}/alignment.maf",
  params:
    refGnom="hJmanBNU",
    qryGnom="{qryGnom}",
    chrom="chr7",
    windowSize=500
  output:
    "QRY_vs_hJmanBNU_alignments/{qryGnom}/Dxy_{chrom}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/R4.yaml"
  resources:
    mem_mb=30000
  threads:
    16
  shell:
    "Rscript --vanilla Dxy.R {input.maf} {params.refGnom} {params.qryGnom} {params.chrom} {params.windowSize} > {output}"

